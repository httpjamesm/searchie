<!DOCTYPE html>
<html lang="en">
{% set page_title = dataset.name %}
{% include "components/head.html.tera" %}

<body
    class="bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 min-h-screen font-['Inter']">
    <div class="flex h-screen">
        {% include "components/sidebar.html.tera" %}

        <div class="flex-1 overflow-auto">
            <div class="p-8">
                <div class="max-w-3xl mx-auto">
                    <div
                        class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
                        <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                            <h2 class="text-lg font-semibold text-gray-900 dark:text-white">Upload Data</h2>
                            <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Upload multiple text files or paste
                                content directly</p>
                        </div>

                        <div class="p-6 space-y-6">
                            <div class="space-y-4">
                                <div>
                                    <h3 class="text-base font-medium text-gray-900 dark:text-white mb-2">Upload Files
                                    </h3>
                                    <div class="border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center"
                                        id="dropZone">
                                        <input type="file" id="fileInput" multiple accept=".txt" class="hidden">
                                        <div class="space-y-2">
                                            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor"
                                                fill="none" viewBox="0 0 48 48">
                                                <path
                                                    d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                                                    stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                            </svg>
                                            <div class="text-sm text-gray-600 dark:text-gray-400">
                                                <label for="fileInput"
                                                    class="relative cursor-pointer rounded-md font-medium text-blue-600 dark:text-blue-400 hover:text-blue-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-blue-500">
                                                    <span>Upload files</span>
                                                </label>
                                                <p class="pl-1">or drag and drop</p>
                                            </div>
                                            <p class="text-xs text-gray-500 dark:text-gray-400">TXT files only</p>
                                        </div>
                                    </div>
                                    <div id="fileList" class="mt-4 space-y-2"></div>
                                    <div class="mt-4 text-right hidden" id="uploadFilesButton">
                                        <button onclick="uploadSelectedFiles()"
                                            class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all text-sm font-medium">
                                            Upload Files
                                        </button>
                                    </div>
                                </div>

                                <div>
                                    <h3 class="text-base font-medium text-gray-900 dark:text-white mb-2">Or Paste
                                        Content</h3>
                                    <div class="space-y-4">
                                        <div>
                                            <input type="text" id="contentName" placeholder="Name (optional)"
                                                class="w-full px-4 py-2 rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                        </div>
                                        <div>
                                            <textarea id="contentText" rows="6" placeholder="Paste your content here"
                                                class="w-full px-4 py-2 rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                                        </div>
                                        <div class="text-right">
                                            <button onclick="uploadPastedContent()"
                                                class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all text-sm font-medium">
                                                Upload Content
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div id="uploadProgress" class="hidden space-y-4">
                                <div class="flex justify-between text-sm text-gray-600 dark:text-gray-400">
                                    <span id="uploadProgressText">Uploading files...</span>
                                    <span id="uploadProgressCount"></span>
                                </div>
                                <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                                    <div id="uploadProgressBar"
                                        class="bg-blue-600 h-2.5 rounded-full transition-all duration-300"
                                        style="width: 0%">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const dropZone = document.getElementById('dropZone');
        const fileInput = document.getElementById('fileInput');
        const fileList = document.getElementById('fileList');
        const uploadFilesButton = document.getElementById('uploadFilesButton');
        const uploadProgress = document.getElementById('uploadProgress');
        const uploadProgressBar = document.getElementById('uploadProgressBar');
        const uploadProgressCount = document.getElementById('uploadProgressCount');

        dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropZone.classList.add('border-blue-500');
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.classList.remove('border-blue-500');
        });

        dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            dropZone.classList.remove('border-blue-500');
            addFilesToList(e.dataTransfer.files);
        });

        fileInput.addEventListener('change', (e) => {
            addFilesToList(e.target.files);
        });

        let selectedFiles = [];

        const addFilesToList = (files) => {
            fileList.innerHTML = '';
            selectedFiles = [];

            for (const file of files) {
                if (file.type !== 'text/plain') {
                    addStatusMessage(`Skipping ${file.name} - Only text files are supported`, 'error');
                    continue;
                }

                const fileId = window.crypto.randomUUID();
                selectedFiles.push({ id: fileId, file });

                const fileDiv = document.createElement('div');
                fileDiv.className = 'flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-900/50 rounded-lg';
                fileDiv.id = `file-${fileId}`;

                const leftSection = document.createElement('div');
                leftSection.className = 'flex items-center space-x-3 flex-1';

                const nameSpan = document.createElement('span');
                nameSpan.className = 'text-sm text-gray-700 dark:text-gray-300';
                nameSpan.innerText = file.name;

                const progressContainer = document.createElement('div');
                progressContainer.className = 'flex-1 max-w-[200px] hidden';
                progressContainer.id = `progress-${fileId}`;

                const progressBar = document.createElement('div');
                progressBar.className = 'h-1.5 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden';

                const progressFill = document.createElement('div');
                progressFill.className = 'h-full bg-blue-600 rounded-full transition-all duration-300';
                progressFill.style.width = '0%';
                progressFill.id = `progress-fill-${fileId}`;

                const removeButton = document.createElement('button');
                removeButton.className = 'text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 ml-3';
                removeButton.onclick = () => removeFile(fileId);
                removeButton.id = `remove-${fileId}`;

                const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                svg.setAttribute('class', 'w-4 h-4');
                svg.setAttribute('fill', 'none');
                svg.setAttribute('stroke', 'currentColor');
                svg.setAttribute('viewBox', '0 0 24 24');

                const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                path.setAttribute('stroke-linecap', 'round');
                path.setAttribute('stroke-linejoin', 'round');
                path.setAttribute('stroke-width', '2');
                path.setAttribute('d', 'M6 18L18 6M6 6l12 12');

                progressBar.appendChild(progressFill);
                progressContainer.appendChild(progressBar);
                leftSection.appendChild(nameSpan);
                leftSection.appendChild(progressContainer);
                svg.appendChild(path);
                removeButton.appendChild(svg);
                fileDiv.appendChild(leftSection);
                fileDiv.appendChild(removeButton);
                fileList.appendChild(fileDiv);
            }

            uploadFilesButton.classList.toggle('hidden', selectedFiles.length === 0);
        };

        const removeFile = (fileId) => {
            selectedFiles = selectedFiles.filter(item => item.id !== fileId);
            addFilesToList(selectedFiles);
        };

        const uploadDatapoints = async (datapoints) => {
            const response = await fetch(`/api/datapoints`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    dataset_id: '{{dataset.id}}',
                    datapoints
                }),
            });

            if (!response.ok) {
                throw new Error(await response.text());
            }
        };

        const uploadSelectedFiles = async () => {
            uploadFilesButton.classList.add('hidden');
            const totalFiles = selectedFiles.length;

            try {
                await Promise.all(selectedFiles.map(async ({ id, file }, index) => {
                    const progressContainer = document.getElementById(`progress-${id}`);
                    const progressFill = document.getElementById(`progress-fill-${id}`);
                    const removeButton = document.getElementById(`remove-${id}`);

                    progressContainer.classList.remove('hidden');
                    removeButton.classList.add('hidden');
                    progressFill.style.width = '30%';

                    const data = await file.text();
                    progressFill.style.width = '60%';

                    const datapoint = {
                        data_type: 'text',
                        data,
                        name: file.name
                    };

                    await uploadDatapoints([datapoint]);
                    progressFill.style.width = '100%';
                    progressFill.classList.remove('bg-blue-600');
                    progressFill.classList.add('bg-green-500');
                }));
            } catch (error) {
                console.error('Failed to upload files:', error);
            }

            setTimeout(() => {
                selectedFiles = [];
                addFilesToList([]);
            }, 1500);
        };

        const uploadPastedContent = async () => {
            const name = document.getElementById('contentName').value;
            const content = document.getElementById('contentText').value;

            if (!content) {
                alert('Please enter some content');
                return;
            }

            try {
                await uploadDatapoints([{
                    data_type: 'text',
                    data: content,
                    name: name || 'Untitled'
                }]);
                document.getElementById('contentName').value = '';
                document.getElementById('contentText').value = '';
            } catch (error) {
                alert(`Failed to upload content: ${error}`);
            }
        };
    </script>
</body>

</html>